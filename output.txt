Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/trieu/anaconda3/envs/MILQ/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/4733e48b11b545859581dd9eb32df382-pulp.mps timeMode elapsed branch printingOptions all solution /tmp/4733e48b11b545859581dd9eb32df382-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 402 COLUMNS
At line 2481 RHS
At line 2879 BOUNDS
At line 3140 ENDATA
Problem MODEL has 397 rows, 266 columns and 1557 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 10 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 370 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 241 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 237 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 237 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 233 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 229 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 227 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 224 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 219 strengthened rows, 0 substitutions
Cgl0004I processed model has 384 rows, 263 columns (258 integer (258 of which binary)) and 3738 elements
Cbc0038I Initial state - 56 integers unsatisfied sum - 11.9008
Cbc0038I Pass   1: suminf.    6.76542 (36) obj. 15.9056 iterations 86
Cbc0038I Pass   2: suminf.    4.44266 (29) obj. 26 iterations 30
Cbc0038I Pass   3: suminf.    0.89205 (22) obj. 51 iterations 15
Cbc0038I Pass   4: suminf.    0.91272 (21) obj. 63 iterations 37
Cbc0038I Pass   5: suminf.    0.84849 (18) obj. 63 iterations 2
Cbc0038I Pass   6: suminf.    1.06529 (18) obj. 63 iterations 8
Cbc0038I Pass   7: suminf.    1.06167 (18) obj. 63 iterations 2
Cbc0038I Pass   8: suminf.    0.92148 (18) obj. 63 iterations 3
Cbc0038I Pass   9: suminf.    0.91343 (18) obj. 63 iterations 3
Cbc0038I Pass  10: suminf.    0.95664 (18) obj. 63 iterations 5
Cbc0038I Pass  11: suminf.    0.95038 (18) obj. 63 iterations 2
Cbc0038I Pass  12: suminf.    0.84849 (18) obj. 63 iterations 2
Cbc0038I Pass  13: suminf.    0.84849 (18) obj. 63 iterations 0
Cbc0038I Pass  14: suminf.    1.06529 (18) obj. 63 iterations 8
Cbc0038I Pass  15: suminf.    1.06167 (18) obj. 63 iterations 2
Cbc0038I Pass  16: suminf.    0.92148 (18) obj. 63 iterations 3
Cbc0038I Pass  17: suminf.    0.91343 (18) obj. 63 iterations 3
Cbc0038I Pass  18: suminf.    0.95664 (18) obj. 63 iterations 5
Cbc0038I Pass  19: suminf.    0.95038 (18) obj. 63 iterations 2
Cbc0038I Pass  20: suminf.    5.33836 (53) obj. 62.0213 iterations 76
Cbc0038I Pass  21: suminf.    0.84877 (39) obj. 61.9839 iterations 14
Cbc0038I Pass  22: suminf.    0.39029 (20) obj. 63 iterations 37
Cbc0038I Pass  23: suminf.    0.39029 (20) obj. 63 iterations 0
Cbc0038I Pass  24: suminf.    0.41114 (19) obj. 63 iterations 24
Cbc0038I Pass  25: suminf.    0.41114 (19) obj. 63 iterations 0
Cbc0038I Pass  26: suminf.    1.19384 (18) obj. 63 iterations 25
Cbc0038I Pass  27: suminf.    0.76964 (18) obj. 63 iterations 1
Cbc0038I Pass  28: suminf.    0.69256 (17) obj. 63 iterations 10
Cbc0038I Pass  29: suminf.    0.69256 (17) obj. 63 iterations 0
Cbc0038I Pass  30: suminf.    0.61498 (16) obj. 63 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 143 integers at bound fixed and 0 continuous
Cbc0038I Full problem 384 rows 263 columns, reduced to 260 rows 120 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.18 seconds)
Cbc0038I Full problem 385 rows 263 columns, reduced to 385 rows 263 columns - too large
Cbc0038I After 0.19 seconds - Feasibility pump exiting - took 0.02 seconds
Cbc0031I 124 added rows had average density of 140.67742
Cbc0013I At root node, 124 cuts changed objective from 10 to 13.771506 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 28467 row cuts average 10.6 elements, 0 column cuts (0 active)  in 0.434 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 4512 row cuts average 257.1 elements, 0 column cuts (0 active)  in 0.535 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 184 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1037 row cuts average 3.7 elements, 0 column cuts (0 active)  in 1.578 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 118 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.062 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 1085 row cuts average 21.2 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 13.771506 (6.36 seconds)
Cbc0016I Integer solution of 55 found by strong branching after 28464 iterations and 172 nodes (9.53 seconds)
Cbc0038I Full problem 384 rows 263 columns, reduced to 246 rows 128 columns - 12 fixed gives 212, 96 - still too large
Cbc0038I Full problem 384 rows 263 columns, reduced to 75 rows 39 columns
Cbc0038I Full problem 384 rows 263 columns, reduced to 127 rows 71 columns
Cbc0038I Full problem 384 rows 263 columns, reduced to 138 rows 83 columns
Cbc0038I Full problem 384 rows 263 columns, reduced to 133 rows 79 columns
Cbc0038I Full problem 384 rows 263 columns, reduced to 148 rows 72 columns
Cbc0038I Full problem 384 rows 263 columns, reduced to 115 rows 61 columns
Cbc0038I Full problem 384 rows 263 columns, reduced to 75 rows 49 columns
Cbc0010I After 1000 nodes, 90 on tree, 55 best solution, best possible 13.771506 (12.97 seconds)
Cbc0038I Full problem 384 rows 263 columns, reduced to 92 rows 53 columns
Cbc0038I Full problem 384 rows 263 columns, reduced to 125 rows 71 columns
Cbc0016I Integer solution of 53 found by strong branching after 74412 iterations and 1231 nodes (13.93 seconds)
Cbc0038I Full problem 384 rows 263 columns, reduced to 206 rows 103 columns
Cbc0010I After 2000 nodes, 145 on tree, 53 best solution, best possible 13.771506 (16.12 seconds)
Cbc0038I Full problem 384 rows 263 columns, reduced to 192 rows 95 columns
Cbc0004I Integer solution of 51 found after 114176 iterations and 2662 nodes (17.44 seconds)
Cbc0004I Integer solution of 33 found after 117465 iterations and 2709 nodes (18.05 seconds)
Cbc0004I Integer solution of 16 found after 121340 iterations and 2768 nodes (18.44 seconds)
Cbc0001I Search completed - best objective 16, took 122659 iterations and 2780 nodes (18.56 seconds)
Cbc0032I Strong branching done 14732 times (199787 iterations), fathomed 110 nodes and fixed 689 variables
Cbc0035I Maximum depth 93, 1370 variables fixed on reduced cost
Cuts at root node changed objective from 10 to 13.7715
Probing was tried 3484 times and created 118387 cuts of which 0 were active after adding rounds of cuts (1.147 seconds)
Gomory was tried 3254 times and created 14315 cuts of which 0 were active after adding rounds of cuts (0.953 seconds)
Knapsack was tried 3254 times and created 907 cuts of which 0 were active after adding rounds of cuts (0.424 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
MixedIntegerRounding2 was tried 3254 times and created 3754 cuts of which 0 were active after adding rounds of cuts (2.963 seconds)
FlowCover was tried 100 times and created 118 cuts of which 0 were active after adding rounds of cuts (0.062 seconds)
TwoMirCuts was tried 3254 times and created 2592 cuts of which 0 were active after adding rounds of cuts (0.343 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ImplicationCuts was tried 29 times and created 1785 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)

Result - Optimal solution found

Objective value:                16.00000000
Enumerated nodes:               2780
Total iterations:               122659
Time (CPU seconds):             18.46
Time (Wallclock seconds):       18.63

Option for printingOptions changed from normal to all
Total time (CPU seconds):       18.46   (Wallclock seconds):       18.63

Problem:
InfoProblem(base_jobs=[<qiskit.circuit.quantumcircuit.QuantumCircuit object at 0x773d0955f8b0>, <qiskit.circuit.quantumcircuit.QuantumCircuit object at 0x773d0955f910>], accelerators={'QUITO': 5, 'BELEM': 5}, big_m=1000, timesteps=64, process_times=[[8, 9], [8, 10], [12, 9]], setup_times=[[[50, 50], [7, 7], [8, 10]], [[50, 50], [50, 50], [10, 9]], [[50, 50], [11, 8], [50, 50]]])
Job Capacities:
{'A': 3, 'B': 5}
In setup_lp.py, _set_up_base_lp_info
job_capacities:  <class 'dict'> {'0': 0, '1': 3, '2': 5}
machine_capacities:  <class 'dict'> {'QUITO': 5, 'BELEM': 5}
In setup_lp.py, _define_lp
jobs:  <class 'list'> ['0', '1', '2']
_____________________________
machine:  <class 'list'> ['QUITO', 'BELEM']
_____________________________
x_ik:  <class 'dict'> {'0': {'QUITO': x_ik_0_QUITO, 'BELEM': x_ik_0_BELEM}, '1': {'QUITO': x_ik_1_QUITO, 'BELEM': x_ik_1_BELEM}, '2': {'QUITO': x_ik_2_QUITO, 'BELEM': x_ik_2_BELEM}}
lp_instance:  <class 'src.scheduling.types.LPInstance'>
